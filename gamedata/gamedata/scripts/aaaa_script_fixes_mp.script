-- Fixes to scripts via monkey patches

-- Correct behaviour of actor_on_item_before_pickup callback
function bind_stalker_ext.actor_on_item_before_pickup(item) -- called from engine!
	-- Called when actor is pressing use key to pick up an item
	-- return false will prevent actor from pickup the item
	local flags = { ret_value = true }
	SendScriptCallback("actor_on_item_before_pickup",item,flags)
	return flags.ret_value
end

-- Fix to NPC PDA not working with active weapon when using "view" function
-- Thanks Catspaw for testing
function ui_pda_npc_tab.use_view(obj)
	local p = obj:parent()
	if not (p and p:id() == AC_ID) then
		return
	end
	
	hide_hud_inventory()
	
	if get_console_cmd(1,"g_3d_pda") then
		db.actor:make_item_active(obj)
		ActorMenu.get_pda_menu():SetActiveSubdialog("eptNPC")
	else
		db.actor:move_to_slot(obj, 14)

		if db.actor:active_slot() ~= 0 then
			db.actor:activate_slot(0)
		end

		local tg = time_global()
		CreateTimeEvent(0, "delay_2d_pda_draw", 0, function()
			if time_global() - tg > 5000 then
				-- timeout
				return true
			end
			if not db.actor:active_item() then
				ActorMenu.get_pda_menu():ShowDialog(true) 
				ActorMenu.get_pda_menu():SetActiveSubdialog("eptNPC") 
				return true
			end
		end)
	end
end

-- Additional params for callbacks
-- Called on CHudItem Motion Mark
_G.CHudItem__OnMotionMark = function(state, mark, obj, owner)
	SendScriptCallback("actor_on_hud_animation_mark", state, mark, obj, owner)
end

_G.CHudItem__PlayHUDMotion = function(anm_table, obj, owner)
	SendScriptCallback("actor_on_hud_animation_play", anm_table, obj, owner)
	return anm_table
end

-- Disable caching of ini values to utilize engine functions and reduce memory footprint
_G.USE_INI_MEMOIZE = false
clear_ini_cache(ini_sys)
if ini_cache then
	empty_table(ini_cache)
end

_G.ini_file.r_string_ex = function(ini,s,k,def)
	return ini:section_exist(s) and ini:line_exist(s,k) and ini:r_string(s,k) or def
end
_G.ini_file.r_float_ex = function(ini,s,k,def)
	if not (ini:section_exist(s) and ini:line_exist(s,k)) then
		return def
	end
	local v = ini:r_string(s,k)
	if v == nil then
		return def
	end
	return tonumber(v)
end
_G.ini_file.r_bool_ex = function(ini,s,k,def)
	if not (ini:section_exist(s) and ini:line_exist(s,k)) then
		return def
	end
	local v = ini:r_string(s,k)
	if v == nil then
		return def
	end
	return v == "true" or v == "1"
end
_G.ini_file.r_sec_ex = function(ini,s,k,def)
	local result = ini_file.r_string_ex(ini,s,k,def)
	if result and ini_sys:section_exist(result) then
		return result
	end
	return nil
end
_G.ini_file.r_line_ex = function(ini,s,k)
	return ini:r_line(s,k,"","")
end

-- SYS_GetParam disabled ini caching in benefit to use engine functions and reduce memory footprint
empty_table(INISYS_CACHE)
_G.INISYS_TYPES = {
	-- string
	[0] = function(typ, sec, param, def)
		return ini_sys:r_string_ex(sec, param, def)
	end,
	-- bool
	[1] = function(typ, sec, param, def)
		return ini_sys:r_bool_ex(sec, param)
	end,
	-- float
	[2] = function(typ, sec, param, def)
		return ini_sys:r_float_ex(sec, param, def)
	end,
}
_G.SYS_GetParam = function(typ, sec, param, def)
	if not (typ and INISYS_TYPES[typ]) then
		printe("!ERROR SYS_GetParam(%s, %s, %s, %s), incorrect type %s", typ, sec, param, def, typ)
		callstack()
		return
	end

	if not (sec and param) then
		printe("!ERROR SYS_GetParam(%s, %s, %s, %s) | What's missing?", typ, sec, param, def)
		callstack()
		return
	end

	local result = INISYS_TYPES[typ](typ, sec, param, def)
	return result
end
